import { NextResponse } from 'next/server';import { google } from 'googleapis';const auth = new google.auth.GoogleAuth({  credentials: {    client_email: process.env.GOOGLE_CLIENT_EMAIL,    private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),  },  scopes: ['https://www.googleapis.com/auth/spreadsheets'],});const sheets = google.sheets({ version: 'v4', auth });export async function GET(request: Request) {  try {    const { searchParams } = new URL(request.url);    const id = searchParams.get('id');    if (!id) {      return NextResponse.json({         status: 'error',         message: 'ID parameter diperlukan'       }, { status: 400 });    }    const spreadsheetId = process.env.GOOGLE_SHEET_ID;        if (!spreadsheetId) {      return NextResponse.json({         status: 'error',         message: 'GOOGLE_SHEET_ID tidak ditemukan'       }, { status: 500 });    }    const response = await sheets.spreadsheets.values.get({      spreadsheetId,      range: 'ProcessedData!A:Z',    });    const rows = response.data.values || [];        if (rows.length === 0) {      return NextResponse.json({         status: 'error',         message: 'Data tidak ditemukan di sheet'       }, { status: 404 });    }    let participantRow = null;    for (let i = 1; i < rows.length; i++) {      const row = rows[i];      if (row[10] && row[10].toString().trim() === id.trim()) {        participantRow = row;        break;      }    }    if (!participantRow) {      return NextResponse.json({        status: 'error',        message: 'Peserta tidak ditemukan'      }, { status: 404 });    }    const participantData = {      id: participantRow[10],      nama: participantRow[1] || 'Tidak ada nama',      instansi: participantRow[5] || participantRow[6] || 'Tidak ada instansi'    };    return NextResponse.json({      status: 'verified',      message: 'Peserta ditemukan',      data: participantData    });  } catch (error) {    console.error('Verification error:', error);    return NextResponse.json({       status: 'error',       message: 'Terjadi kesalahan server',      details: error instanceof Error ? error.message : 'Unknown error'    }, { status: 500 });  }}export async function POST(request: Request) {  try {    const body = await request.json();    const { id, nama, instansi } = body;    if (!id) {      return NextResponse.json({         status: 'error',         message: 'ID diperlukan'       }, { status: 400 });    }    const spreadsheetId = process.env.GOOGLE_SHEET_ID;        if (!spreadsheetId) {      return NextResponse.json({         status: 'error',         message: 'GOOGLE_SHEET_ID tidak ditemukan'       }, { status: 500 });    }    const checkResponse = await sheets.spreadsheets.values.get({      spreadsheetId,      range: 'Registrasi!A:B',    });    const existingRows = checkResponse.data.values || [];        for (let i = 1; i < existingRows.length; i++) {      const row = existingRows[i];      if (row[0] && row[0].toString().trim() === id.trim()) {        return NextResponse.json({          status: 'error',          message: 'Peserta sudah pernah absen sebelumnya',          timestamp: row[1] || 'Tidak ada timestamp'        }, { status: 409 });      }    }    const timestamp = new Date().toLocaleString('id-ID', {      day: '2-digit',      month: '2-digit',       year: 'numeric',      hour: '2-digit',      minute: '2-digit',      second: '2-digit',      timeZone: 'Asia/Jakarta'    });    await sheets.spreadsheets.values.append({      spreadsheetId,      range: 'Registrasi!A:B',      valueInputOption: 'RAW',      requestBody: {        values: [[id, timestamp]]      }    });    return NextResponse.json({      status: 'verified',      message: 'Kehadiran berhasil dicatat',      data: {        id,        nama,        instansi,        status: `Hadir - ${timestamp}`      }    });  } catch (error) {    console.error('Attendance error:', error);    return NextResponse.json({       status: 'error',       message: 'Terjadi kesalahan server',      details: error instanceof Error ? error.message : 'Unknown error'    }, { status: 500 });  }}